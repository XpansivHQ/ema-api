syntax = "proto3";

package ema_registry.v1;

option go_package = "github.com/xpansiv/registry";


import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "xpansiv/ref-data.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Xpansiv Registry API";
    version: "1.0.x";
    contact: {
      name: "Xpansiv Inc.";
      url: "https://xpansiv.com/";
      email: "kignatyev@xpansiv.com";
    };
    license: {
      name: "BSD 3-Clause License";
      url: "https://opensource.org/licenses/BSD-3-Clause";
    };
    description: "see more https://xpansivhq.atlassian.net/wiki/spaces/AEM/pages/1872625715/Registries+API"
  };

  base_path: "/api/v1/registry";
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};



message OpResult {

}

message Account {
  string id = 1;

}


message SubAccount {
  Account account = 1;
  string sub_account_id = 2;
  eco_data.v1.AdministrativeArea1 retirement_location = 3;
}

message RecPosition {

}

message RecTransfer {

}

message TransferKey {

}

message RegistryImportData {
  string account_id = 1;
  repeated SubAccount sub_accounts = 2;
  repeated RecTransfer transfers = 3;
  repeated TransferKey known_transfer_keys = 4;
  repeated RecPosition retired_positions = 5;
  repeated RecPosition active_positions = 6;
}

message RegistryImportResult {

}

message RegistryExportData {
  string account_id = 1;
}

message RegistryExportResult {

}

message RecProgram {
  string code = 1;
}

message RecPrograms {
  repeated RecProgram items = 1;
}

service EMARegistryService {

  rpc addRecPrograms(RecProgram ) returns ( RecProgram );

  rpc ListAvailableRecPrograms(google.protobuf.Empty ) returns ( RecPrograms ){
    option (google.api.http) = {
      get: "/data/rec-program"
    };
  }

  rpc ImportRegistryData(RegistryImportData) returns (RegistryImportResult) {
    option (google.api.http) = {
      post: "/account/{account_id}/import"
      body: "*"
    };
  };

  rpc UpdateRegistry(RegistryExportData) returns (RegistryExportResult) {
    option (google.api.http) = {
      post: "/account/{account_id}/registry/export"
      body: "*"
    };
  };

}
